package MemoryManagement;

import java.util.ArrayList;

public class MemoryManager {
//chasdf
	private Tree tree;
	private int maxSize;
	private ArrayList<Tree> leaves;
	
	public MemoryManager(int maxSize)
	{
		this.maxSize = maxSize;
		leaves = new ArrayList<Tree>();
		tree = new Tree(maxSize, null, 0, leaves);
	}
	
	public void allocate(Process p)
	{
		tree.allocate(p);
	}
	
	public void deallocate(Process p)
	{
		Tree t = null;
		for(int i = 0; i < leaves.size(); i++)
		{
			if(leaves.get(i).getLp() == null)
				;
			else if(leaves.get(i).getLp().getName() == p.getName())
				t = leaves.get(i);
		}
		
		if(t == null)
		{
			return;
		}
		
		//at this point, 
		//t is the tree node we need to remove the process from
		
		if(t.getSibling() == null)
		{
			System.out.println("Error. Look in the deallocate method in Memory Manager");
		}
		else if(t.getSibling().getLp() == null && t.getSibling().getLeft() == null)
		{
			
			leaves.add(t.getParent());
			leaves.remove(t.getSibling());
			leaves.remove(t);
			t.getParent().resetChildren();
		}
		else
		{
			t.setLp(null);
			
		}
		
		System.out.println("done");
		
		
		
		
	}
	public String toString()
	{
		return leaves.toString();
	}
}
